import time
from utils.clear_terminal import clear_terminal
import random
import keyboard


def handle_playing(creature):
    """
    G√®re l'activit√© de jeu de la cr√©ature.

    V√©rifie si la cr√©ature a suffisamment d'√©nergie pour jouer,
    puis lance un mini-jeu de cache-cache pour augmenter son bonheur.

    Args:
        creature: L'objet cr√©ature qui va jouer
    """
    clear_terminal()

    # V√©rifier si la cr√©ature a assez d'√©nergie pour jouer
    if creature.energy < 10:
        print(f"{creature.name} est trop fatigu√© pour jouer maintenant.")
        input("Appuyez sur Entr√©e pour continuer...")
        return

    # Lancer le mini-jeu
    mini_game(creature)


def mini_game(creature):
    """
    Mini-jeu de cache-cache o√π le joueur doit retrouver sa position al√©atoire sur une grille.

    Le joueur se d√©place sur une grille 9x9 √† l'aide des fl√®ches directionnelles.
    Le nombre de mouvements n√©cessaires influence le gain de bonheur de la cr√©ature.

    Args:
        creature: L'objet cr√©ature qui va gagner du bonheur en jouant
    """
    print(f"Vous allez jouer √† un mini-jeu pour augmenter le bonheur de {creature.name} !\n")
    print(f"Vous allez incarner {creature.name} et vous allez devoir vous retrouver dans la carte.")
    print("Bien sur votre position est al√©atoire (ce serait trop facile sinon).\n")

    # Initialisation de la grille 9x9 (0: espace vide, 1: position actuelle, 2: positions visit√©es)
    hide_and_seek_map = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0],  # Position de d√©part (centre)
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]

    # G√©n√©rer une position al√©atoire √† atteindre
    random_position = get_random_position()
    user_position = (4, 4)  # Position initiale au centre

    counter = 0  # Compteur de mouvements

    # Boucle principale du jeu
    while True:
        print_map(hide_and_seek_map)

        print(
            '\n\nVotre position actuelle est repr√©sent√© par üìç, vous pouvez maintenant utiliser les fl√®ches directionnelles pour vous d√©placer.\n')
        time.sleep(0.5)

        # Obtenir la direction choisie par le joueur
        direction = get_user_input()

        # Sauvegarder la position actuelle avant d√©placement
        user_position_saved = user_position

        # Traiter le d√©placement selon la direction
        match direction:
            case 'up':
                if user_position[0] > 0:  # V√©rifier si le d√©placement est dans les limites
                    user_position = (user_position[0] - 1, user_position[1])
                else:
                    print("Vous ne pouvez pas aller plus haut.")
                    time.sleep(1)
            case 'down':
                if user_position[0] < 8:
                    user_position = (user_position[0] + 1, user_position[1])
                else:
                    print("Vous ne pouvez pas aller plus bas.")
                    time.sleep(1)
            case 'left':
                if user_position[1] > 0:
                    user_position = (user_position[0], user_position[1] - 1)
                else:
                    print("Vous ne pouvez pas aller plus √† gauche.")
                    time.sleep(1)
            case 'right':
                if user_position[1] < 8:
                    user_position = (user_position[0], user_position[1] + 1)
                else:
                    print("Vous ne pouvez pas aller plus √† droite.")
                    time.sleep(1)

        # V√©rifier si le joueur a atteint la position cible
        if user_position == random_position:
            print("Bravo, vous vous √™tes retrouv√© !")
            creature.play(counter, counter / 2)  # Le bonheur gagn√© d√©pend du nombre de mouvements
            time.sleep(5)
            break

        counter += 1  # Incr√©menter le compteur de mouvements

        # Mettre √† jour la grille: marquer l'ancienne position comme visit√©e et la nouvelle comme position actuelle
        hide_and_seek_map[user_position_saved[0]][user_position_saved[1]] = 2
        hide_and_seek_map[user_position[0]][user_position[1]] = 1
        clear_terminal()


def get_user_input():
    """
    Capture l'entr√©e du joueur via les touches fl√©ch√©es.

    Returns:
        str: Direction choisie ('up', 'down', 'left', 'right')
    """
    while True:
        if keyboard.is_pressed('up'):
            return 'up'
        elif keyboard.is_pressed('down'):
            return 'down'
        elif keyboard.is_pressed('left'):
            return 'left'
        elif keyboard.is_pressed('right'):
            return 'right'


def get_random_position():
    """
    G√©n√®re une position al√©atoire diff√©rente de la position de d√©part.

    Returns:
        tuple: Coordonn√©es (ligne, colonne) de la position al√©atoire
    """
    while True:
        random_position = (random.randint(0, 8), random.randint(0, 8))
        # S'assurer que la position al√©atoire n'est pas la position de d√©part (4,4)
        if random_position[0] != 4 or random_position[1] != 4:
            return random_position


def print_map(hide_and_seek_map):
    """
    Affiche la grille de jeu avec des emojis pour repr√©senter les diff√©rents √©l√©ments.

    Args:
        hide_and_seek_map (list): Grille 2D repr√©sentant l'√©tat du jeu
    """
    for line in range(len(hide_and_seek_map)):
        print('\n', end='')
        for column in range(len(hide_and_seek_map[line])):
            if hide_and_seek_map[line][column] == 0:
                print('ü™®', end=' ')  # Espace vide
            elif hide_and_seek_map[line][column] == 1:
                print('üìç', end=' ')  # Position actuelle
            elif hide_and_seek_map[line][column] == 2:
                print('‚ùå ', end=' ')  # Position visit√©e